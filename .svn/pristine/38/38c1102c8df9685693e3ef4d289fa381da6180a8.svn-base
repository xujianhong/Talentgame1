package com.daomingedu.talentgame.mvp.ui

import android.Manifest
import android.app.Activity
import android.app.ProgressDialog
import android.content.DialogInterface
import android.content.Intent
import android.database.sqlite.SQLiteDatabase
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.os.Message
import android.provider.MediaStore
import android.util.Log
import android.view.Gravity
import android.view.View
import android.view.WindowManager
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import com.daomingedu.onecp.app.Constant
import com.daomingedu.onecp.app.onClick
import com.daomingedu.onecp.app.visible
import com.daomingedu.talentgame.R
import com.daomingedu.talentgame.app.Preference
import com.daomingedu.talentgame.database.*
import com.daomingedu.talentgame.di.component.DaggerMusicRaceUploadComponent
import com.daomingedu.talentgame.di.module.MusicRaceUploadModule
import com.daomingedu.talentgame.mvp.contract.MusicRaceUploadContract
import com.daomingedu.talentgame.mvp.model.entity.LocalWork
import com.daomingedu.talentgame.mvp.model.entity.UploadVideoAppPage
import com.daomingedu.talentgame.mvp.model.entity.UploadVideoParamBean
import com.daomingedu.talentgame.mvp.presenter.MusicRaceUploadPresenter
import com.daomingedu.talentgame.mvp.ui.adapter.MusicRaceUploadAdapter
import com.daomingedu.talentgame.util.*
import com.google.gson.Gson
import com.jess.arms.base.BaseActivity
import com.jess.arms.di.component.AppComponent
import com.jess.arms.utils.ArmsUtils
import com.jmolsmobile.landscapevideocapture.VideoCaptureActivity
import com.jmolsmobile.landscapevideocapture.configuration.CaptureConfiguration
import com.jmolsmobile.landscapevideocapture.configuration.PredefinedCaptureConfigurations
import com.pili.pldroid.player.widget.PLVideoTextureView
import com.tbruyelle.rxpermissions2.RxPermissions
import com.tencent.cos.xml.CosXmlServiceConfig
import com.tencent.cos.xml.CosXmlSimpleService
import com.tencent.cos.xml.exception.CosXmlClientException
import com.tencent.cos.xml.exception.CosXmlServiceException
import com.tencent.cos.xml.listener.CosXmlResultListener
import com.tencent.cos.xml.model.CosXmlRequest
import com.tencent.cos.xml.model.CosXmlResult
import com.tencent.cos.xml.transfer.TransferConfig
import com.tencent.cos.xml.transfer.TransferManager
import io.reactivex.Observable
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.Disposable
import kotlinx.android.synthetic.main.activity_music_race_upload.*
import kotlinx.android.synthetic.main.activity_music_race_upload.PLVideoTextureView
import kotlinx.android.synthetic.main.activity_register.*
import kotlinx.android.synthetic.main.activity_upload_video_list.*
import kotlinx.android.synthetic.main.activity_upload_video_play.*
import kotlinx.android.synthetic.main.include_title.*
import org.w3c.dom.Text
import timber.log.Timber
import java.io.File
import java.util.*
import java.util.concurrent.TimeUnit

/**
 * Description
 * Created by jianhongxu on 4/14/21
 */
class MusicRaceUploadActivity : BaseActivity<MusicRaceUploadPresenter>(),
    MusicRaceUploadContract.View {

    var uploadVideoParamBean: UploadVideoParamBean? = null
    lateinit var dataPage: UploadVideoAppPage

    //上传的文件
    var selectVideoFile: File? = null
    var selectFileName: String? = null

    private var videoPixel by Preference(Constant.VIDEO_PIXEL, 0)
    private var videoTime by Preference(Constant.VIDEO_TIME, 0)

    private var videoFolderName = "Movies" //录制视频保存的文件夹名称 默认 Movies

    var progressDialog: ProgressDialog? = null

    private lateinit var errorMsg: String


    private var videoPath: String? = null //当前录制视频的路径


    var helper: BaseDataHelper? = null //数据库
    var db: SQLiteDatabase? = null


    override fun setupActivityComponent(appComponent: AppComponent) {
        DaggerMusicRaceUploadComponent.builder().appComponent(appComponent).musicRaceUploadModule(
            MusicRaceUploadModule(this)
        ).build().inject(this)
    }

    override fun initView(savedInstanceState: Bundle?): Int {
        return R.layout.activity_music_race_upload
    }

    override fun initData(savedInstanceState: Bundle?) {
        title = "上传视频"


        dataPage = intent.getSerializableExtra(DATA_TYPE) as UploadVideoAppPage


        videoTime = dataPage.limitNum
        videoFolderName = if (dataPage.folderName.isEmpty()) "Movies" else dataPage.folderName


        helper = BaseDataHelper(this);
        db = helper?.writableDatabase;



        vVideo.onClick {
            if (uploadVideoParamBean == null) {
                Timber.e("腾讯云所需数据为null")

                showMessage(errorMsg)
                return@onClick
            }
            val alertDialog = AlertDialog.Builder(this@MusicRaceUploadActivity).create()

            alertDialog.show()
            alertDialog.setCancelable(true)
            val window = alertDialog.window;
            if (window != null) {
                window.setContentView(R.layout.diag_uploadmessage);
                window.setGravity(Gravity.CENTER);

                window.findViewById<TextView>(R.id.tv_title).text = "录制提示"
                val tvUploadMsg: TextView = window.findViewById(R.id.tvUploadMsg)
                tvUploadMsg.text =
                    "参赛选手${uploadVideoParamBean?.studentName}，你选取了${uploadVideoParamBean?.itemName}项目${uploadVideoParamBean?.itemGroupName}第${uploadVideoParamBean?.shootNum}次视频录制，该节目还可录制${uploadVideoParamBean?.restNum}次,点击确认后即计算拍摄次数。请确认已准备就绪，确认后点击红色录制键开始录制"

                var tvAgree:TextView = window.findViewById(R.id.tv_agree)
                var disposable = Observable.interval(0, 1, TimeUnit.SECONDS)
                    .take(6)
                    .map { aLong -> 5 - aLong }
                    .observeOn(AndroidSchedulers.mainThread())
                    .doOnSubscribe { tvAgree.isEnabled = false }
                    .subscribe({ aLong -> tvAgree.text = "确认(${aLong})" }, { }, {
                        tvAgree.isEnabled = true
                        tvAgree.text = "确定"
                        tvAgree.setOnClickListener {

                            alertDialog.dismiss()
                            recordVideo()
                        }
                    })

                window.findViewById<TextView>(R.id.tv_cancel).setOnClickListener {
                    alertDialog.dismiss()
                }
            }

        }

        btnUpload.onClick {


            if (uploadVideoParamBean == null) {
                Timber.e("腾讯云所需数据为null")
                if(errorMsg.isNotEmpty())
                showMessage(errorMsg)
                return@onClick
            }
            if (selectVideoFile == null || !selectVideoFile!!.exists()) {
                showMessage("选择视频或拍摄视频")
                return@onClick
            }

            showUploadDialog()

        }

//        mPresenter?.getUploadVideoParam(
//            dataPage.apiUrl + "/getUploadVideoParam.do",
//            dataPage.testSignId,
//            dataPage.studentId
//        )

        recyclerViewData()
    }

    override fun onResume() {
        super.onResume()

        mPresenter?.getUploadVideoParam(
            dataPage.apiUrl + "/getUploadVideoParam.do",
            dataPage.testSignId,
            dataPage.studentId
        )
    }



    /**
     * 上传视频时弹框
     */
    private fun showUploadDialog() {

        val alertDialog = AlertDialog.Builder(this).create()
        alertDialog.show()
        alertDialog.setCancelable(true)
        val window = alertDialog.window;
        if (window != null) {
            window.setContentView(R.layout.diag_uploadmessage);
            window.setGravity(Gravity.CENTER);

            val tvUploadMsg: TextView = window.findViewById(R.id.tvUploadMsg)
            tvUploadMsg.text =
                "参赛选手${uploadVideoParamBean?.studentName}，你选取了${uploadVideoParamBean?.itemName}项目${uploadVideoParamBean?.itemGroupName}${selectFileName}的视频上传，上传后无法修改，请确认无误。点击确认开始上传，上传过程中请勿操作手机。"

           var tvAgree:TextView = window.findViewById(R.id.tv_agree)
            var disposable = Observable.interval(0, 1, TimeUnit.SECONDS)
                .take(6)
                .map { aLong -> 5 - aLong }
                .observeOn(AndroidSchedulers.mainThread())
                .doOnSubscribe { tvAgree.isEnabled = false }
                .subscribe({ aLong -> tvAgree.text = "确认(${aLong})" }, { }, {
                    tvAgree.isEnabled = true
                    tvAgree.text = "确定"
                    tvAgree.setOnClickListener {
                        alertDialog.dismiss()
                        updateCoS(selectVideoFile!!, uploadVideoParamBean!!)
                    }
                })

            window.findViewById<TextView>(R.id.tv_cancel).setOnClickListener {
                alertDialog.dismiss()
            }
        }

    }





    override fun onBackPressed() {
        val intent = Intent()
        intent.putExtra("result", 3)
        setResult(Activity.RESULT_OK, intent)
        super.onBackPressed()
    }

    /**
     * 开始录制视频
     */
    private fun recordVideo() {
        when (MemoryUtil.memoryIsAvailble(this@MusicRaceUploadActivity)) {
            MemoryUtil.MEMORY_OK -> {
                RxPermissions(this@MusicRaceUploadActivity).request(
                    Manifest.permission.RECORD_AUDIO,
                    Manifest.permission.READ_EXTERNAL_STORAGE,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.CAMERA
                )
                    .subscribe {
                        if (it) {
//                            takeVideo("")
                            mPresenter?.saveLocalVideo(
                                dataPage.apiUrl + "/saveLocVideo.do",
                                dataPage.testSignId,
                                dataPage.studentId
                            )
//                            mPresenter?.getWaterMark()
                        } else {
                            Toast.makeText(
                                this@MusicRaceUploadActivity,
                                "请开启相关权限",
                                Toast.LENGTH_SHORT
                            ).show()
                        }
                    }
            }
            MemoryUtil.MEMORY_OUT -> {
                val dialog = AlertDialog.Builder(this@MusicRaceUploadActivity)
                dialog.setMessage("存储空间过小, 可能会出现录制完了无法保存视频的情况, 是否继续拍摄视频")
                dialog.setCancelable(false)
                dialog.setPositiveButton(
                    "继续",
                    object : DialogInterface.OnClickListener {
                        override fun onClick(dialog: DialogInterface?, which: Int) {
                            dialog?.dismiss()
                            RxPermissions(this@MusicRaceUploadActivity).request(
                                Manifest.permission.RECORD_AUDIO,
                                Manifest.permission.READ_EXTERNAL_STORAGE,
                                Manifest.permission.WRITE_EXTERNAL_STORAGE,
                                Manifest.permission.CAMERA
                            )
                                .subscribe {
                                    if (it) {
                                        mPresenter?.saveLocalVideo(
                                            dataPage.apiUrl + "/saveLocVideo.do",
                                            dataPage.testSignId,
                                            dataPage.studentId
                                        )
//                                        mPresenter?.getWaterMark()
                                    } else {
                                        Toast.makeText(
                                            this@MusicRaceUploadActivity,
                                            "请开启相关权限",
                                            Toast.LENGTH_SHORT
                                        ).show()
                                    }
                                }
                        }
                    })
                dialog.setNegativeButton(
                    "取消",
                    object : DialogInterface.OnClickListener {
                        override fun onClick(dialog: DialogInterface?, which: Int) {
                            dialog?.dismiss()
                        }
                    })
                dialog.create().show()
            }
        }
    }

    /**
     * 上传腾讯云
     */
    private fun updateCoS(file: File, bean: UploadVideoParamBean) {

        val credentials = bean.cosTempKey.credentials
        val mySessionCredentialProvider = MySessionCredentialProvider(
            credentials.tmpSecretId,
            credentials.tmpSecretKey,
            credentials.sessionToken,
            bean.cosTempKey.startTime.toLong(),
            bean.cosTempKey.expiredTime.toLong()
        )
        val serviceConfig = CosXmlServiceConfig.Builder()
            .setRegion(bean.region)
            .builder()
        val cosXmlService = CosXmlSimpleService(this, serviceConfig, mySessionCredentialProvider)
        val transferConfig = TransferConfig.Builder().build()
        val transferManager = TransferManager(
            cosXmlService,
            transferConfig
        )

        val bucket = bean.bucketName  //存储桶，格式：BucketName-APPID
        val cosPath = "/${bean.uploadKey}mp4" //对象在存储桶中的位置标识符，即称对象键
        val srcPath = file.absolutePath
        val uploadId: String? = null

        progressDialog = ProgressDialog(this)
        progressDialog?.setCancelable(false)
        progressDialog?.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL)
        progressDialog?.setMessage("视频上传中")
        progressDialog?.show()
        // 上传文件
        val cosxmlUploadTask = transferManager.upload(
            bucket, cosPath,
            srcPath, uploadId
        )
        cosxmlUploadTask.setCosXmlProgressListener { complete, target ->
            Timber.d("onProgress")
            Timber.d(complete.toString())
            Timber.d(target.toString())
            progressDialog?.max = 100
            progressDialog?.progress =
                (((complete.toDouble() / target.toDouble()) * 100).toInt())
        }
        cosxmlUploadTask.setCosXmlResultListener(object : CosXmlResultListener {
            override fun onSuccess(request: CosXmlRequest?, result: CosXmlResult?) {
                Timber.d("onSuccess")
                Timber.d(Gson().toJson(result))
                progressDialog?.dismiss()
                //腾讯云上传成功后

                mPresenter?.saveUploadVideo(
                    dataPage.apiUrl + "/saveUploadVideo.do",
                    dataPage.testSignId, dataPage.studentId,
                    "${uploadVideoParamBean?.uploadKey}mp4",
                    selectVideoFile?.length().toString()
                )

            }

            override fun onFail(
                request: CosXmlRequest?,
                exception: CosXmlClientException?,
                serviceException: CosXmlServiceException?
            ) {
                Timber.d("onFail")
                Timber.d(exception?.errorCode.toString())
                Timber.d(serviceException?.message)
                progressDialog?.dismiss()
            }

        })
    }


    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (resultCode != RESULT_OK) return
        if (requestCode != LocalWork.VIDEO) return

        videoPath = data!!.getStringExtra(VideoCaptureActivity.EXTRA_OUTPUT_FILENAME)



        Timber.e("获得视频路径：" + videoPath)

        showFileDialog(videoPath)

    }


    /**
     * 修改视频文件名
     */
    private fun showFileDialog(videoPath: String?) {
        val alertDialog = AlertDialog.Builder(this).create()
        alertDialog.show()
        alertDialog.setCancelable(false)
        val window = alertDialog.window;
        if (window != null) {
            window.setContentView(R.layout.diag_modifyfile);
            window.setGravity(Gravity.CENTER);

            val edFileName: EditText = window.findViewById(R.id.etFileName)
            edFileName.setText(
                "第${uploadVideoParamBean?.shootNum}次录制"
            )
            val tvAgree: TextView = window.findViewById(R.id.tv_agree)
            edFileName.setOnFocusChangeListener { v, hasFocus ->
                if (hasFocus) {
                    //dialog弹出软键盘
                    window.clearFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
                }

            }

            tvAgree.setOnClickListener {
                var fileName = edFileName.text.toString()
                if (fileName.isEmpty()) {
                    showMessage("请输入文件名")
                    return@setOnClickListener
                }

                val video = Video(videoPath!!, fileName, videoFolderName)

                //往本地数据库里增加一条

                val strinsert =
                    " insert into contact (filepath,fileName,folderName) values('" + videoPath + "','" +
                            fileName + "','" + videoFolderName + "')"
                db!!.execSQL(strinsert)

                recyclerViewData()

                alertDialog.cancel();
            }

        }
    }

    /**
     * 初始化视频播放
     */
    private fun initVideoPlay(videoPath: String) {


        PLVideoTextureView.visibility = View.VISIBLE

        PLVideoTextureView.setMediaController(MediaController(this))
        PLVideoTextureView.setVideoPath(videoPath)
        PLVideoTextureView.start()
        PLVideoTextureView.setOnErrorListener { false }
        PLVideoTextureView.setOnCompletionListener { }
    }


    /**
     * 缓存视频列表
     */
    private fun recyclerViewData() {

        //从本地数据库查询获得全部
        Thread {

            var strselect = "select * from contact WHERE folderName = '$videoFolderName'"
            val cursor = db!!.rawQuery(strselect, null)
            val videoList = mutableListOf<Video>()
            while (cursor.moveToNext()) {
                val video = Video(
                    cursor.getString(cursor.getColumnIndexOrThrow("filepath")),
                    cursor.getString(cursor.getColumnIndexOrThrow("fileName")),
                    cursor.getString(cursor.getColumnIndexOrThrow("folderName"))
                )
                videoList.add(video)

            }
            cursor.close()

            runOnUiThread {
                Timber.e(videoList.toString())
                val mAdapter = MusicRaceUploadAdapter(videoList)
                recyclerView.adapter = mAdapter.apply {
                    setOnItemChildClickListener { adapter, view, position ->
                        when (view.id) {
                            R.id.item_videolist_scan -> {
                                UploadVideoPlayActivity.startUploadVideoPlayActivity(
                                    this@MusicRaceUploadActivity,
                                    mAdapter.getItem(position)!!.filePath
                                )
//                                showMessage("预览")
                            }
                            R.id.item_videolist_select -> {
                                if (selectVideoFile != null && selectVideoFile!!.exists()) {
                                    selectVideoFile?.delete()
                                }
                                selectFileName = mAdapter.getItem(position)!!.fileName
                                selectVideoFile = File(mAdapter.getItem(position)!!.filePath)
                                initVideoPlay(mAdapter.getItem(position)!!.filePath)
                            }
                        }
                    }
                }


            }
        }.start()


    }


    override fun requestUploadVideoParamSuccess(bean: UploadVideoParamBean) {
        uploadVideoParamBean = bean
        tvText.text = bean.remark

    }

    override fun requestUploadVideoParamError(msg: String) {
        errorMsg = msg
    }


    override fun requestSaveUploadVideoSuccess() {
        Toast.makeText(this, "视频上传成功", Toast.LENGTH_SHORT).show()
        hideLoading()
        val intent = Intent()
        intent.putExtra("result", 1)
        setResult(Activity.RESULT_OK, intent)
        finish()
    }

    override fun requestWaterMarkSuccess() {

    }

    override fun requestSaveLocalVideoSuccess() {
        takeVideo("")

    }

    override fun requestSaveLocalVideoError(msg: String) {
        if (videoPath.isNullOrEmpty()) return
        val file = File(videoPath)
        if (file.exists())
            file.delete()
    }


    /**
     * 打开摄像头录像
     */
    private fun takeVideo(fileName: String) {
        val config = createCaptureConfiguration()
        val intent = Intent(this, VideoCaptureActivity::class.java)
        intent.putExtra(VideoCaptureActivity.EXTRA_CAPTURE_CONFIGURATION, config)
        intent.putExtra(VideoCaptureActivity.EXTRA_OUTPUT_FILENAME, fileName) //文件名称
        intent.putExtra(VideoCaptureActivity.WATER, SharedPreferencesUtil.getWater(this))

        intent.putExtra("videoType", 1)

        startActivityForResult(intent, LocalWork.VIDEO)
    }

    private fun createCaptureConfiguration(): CaptureConfiguration {
        //分辨率
        val resolution = when (videoPixel) {
            1 -> PredefinedCaptureConfigurations.CaptureResolution.RES_480P
            2 -> PredefinedCaptureConfigurations.CaptureResolution.RES_720P
            3 -> PredefinedCaptureConfigurations.CaptureResolution.RES_1080P
            else -> PredefinedCaptureConfigurations.CaptureResolution.RES_720P
        }
        //质量
        val quality = PredefinedCaptureConfigurations.CaptureQuality.MEDIUM //低质量
        //限制时长
        //val fileDuration = videoTime * 60 //10分钟
        val fileDuration = videoTime //秒
        //限制大小
        val filesize = CaptureConfiguration.NO_FILESIZE_LIMIT //不限
        //true显示录制视频时的时间，false为不显示
        val builder =
            CaptureConfiguration.Builder(resolution, quality)
        builder.maxDuration(fileDuration)
//        builder.maxFileSize(((application as MyApp).getVideo() / 1024 / 1024) as Int)
        builder.frameRate(PredefinedCaptureConfigurations.FPS_30)
        builder.noCameraToggle()
        builder.showRecordingTime()

        return builder.build()
    }

    override fun onPause() {
        super.onPause()
        PLVideoTextureView.pause()
    }


    override fun showMessage(message: String) {
        ArmsUtils.snackbarText(message)
    }

    companion object {

        const val DATA_TYPE = "UploadVideoAppPage"
        fun startActivity(activity: AppCompatActivity, data: UploadVideoAppPage) {
            val intent = Intent(activity, MusicRaceUploadActivity::class.java)
            intent.putExtra(DATA_TYPE, data)
            activity.startActivityForResult(intent, 0)
        }
    }
}